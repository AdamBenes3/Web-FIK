<!-- views/index.ejs -->
<!DOCTYPE html>
<html>

<head>
    <title>UJF</title>
    <style>
        table {
            border-collapse: collapse;
            width: 100%;
        }

        th,
        td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
    </style>
    <style>
        #toggleButton {
            cursor: pointer;
            background-color: #007BFF;
            color: white;
            padding: 5px 10px;
            border: none;
            border-radius: 5px;
        }
    </style>
</head>

<body>

    <div id="lastReloadTime">Last Reload Time: </div>
    <h1>Json data:</h1>

    <table>
        <tr>
            <th>TTN fik8b last json</th>
            <td>
                <button id="fik8bButton">fik-8b</button>
                <div id="fik8bPanel"></div>
            </td>
        </tr>
        <tr>
            <th>TTN px4 last json</th>
            <td>
                <button id="px4Button">px4</button>
                <div id="px4Panel"></div>
            </td>
        </tr>
        <tr>
            <th>Car 1 last json</th>
            <td>
                <button id="car1Button">Car 1</button>
                <div id="car1Panel"></div>
            </td>
        </tr>
        <tr>
            <th>Car 2 last json</th>
            <td>
                <button id="car2Button">Car 2</button>
                <div id="car2Panel"></div>
            </td>
        </tr>
        <tr>
            <th>Car 3 last json</th>
            <td>
                <button id="car3Button">Car 3</button>
                <div id="car3Panel"></div>
            </td>
        </tr>
    </table>

    <h1>Formated json:</h1>

    <pre id="formattedJson"></pre>

    <h1>Last HB:</h1>

    <div id="hbTableContainer">
        <table>
            <tr>
                <th>CDP HB</th>
                <td id="cdpHb"></td>
            </tr>
            <tr>
                <th>Car 1 HB</th>
                <td id="car1Hb"></td>
            </tr>
            <tr>
                <th>Car 2 HB</th>
                <td id="car2Hb"></td>
            </tr>
            <tr>
                <th>Car 3 HB</th>
                <td id="car3Hb"></td>
            </tr>
            <tr>
                <th>LDP HB</th>
                <td id="ldpHb"></td>
            </tr>
        </table>
    </div>

    <h1>Tables of output:</h1>

    <table>
        <tr>
            <th>fik8b TTN data</th>
            <td>
                <button id="fik8bDataButton">fik8b</button>
                <div id="fik8bDataPanel"></div>
            </td>
        </tr>
        <tr>
            <th>px4 TTN data</th>
            <td>
                <button id="px4DataButton">px4</button>
                <div id="px4DataPanel"></div>
            </td>
        </tr>
        <tr>
            <th>Car data</th>
            <td>
                <button id="carDataButton">car</button>
                <div id="carDataPanel"></div>
            </td>
        </tr>
    </table>

    <script>


        var fik8b;

        var fik8bPanel = document.getElementById('fik8bPanel');
        var fik8bButton = document.getElementById('fik8bButton');

        fik8bButton.addEventListener('click', function () {
            fik8bPanel.style.display = fik8bPanel.style.display === 'block' ? 'none' : 'block';
            if (fik8bPanel.style.display === 'block') {
                px4Panel.style.display = 'none';
                car1Panel.style.display = 'none';
                car2Panel.style.display = 'none';
                car3Panel.style.display = 'none';
                var formattedJson = JSON.stringify(JSON.parse(fik8b.message), null, 2);
                document.getElementById('formattedJson').textContent = formattedJson;
            } else {
                document.getElementById('formattedJson').textContent = '';
            }
        });



        var px4;

        var px4Panel = document.getElementById('px4Panel');
        var px4Button = document.getElementById('px4Button');

        px4Button.addEventListener('click', function () {
            px4Panel.style.display = px4Panel.style.display === 'block' ? 'none' : 'block';
            if (px4Panel.style.display === 'block') {
                fik8bPanel.style.display = 'none';
                car1Panel.style.display = 'none';
                car2Panel.style.display = 'none';
                car3Panel.style.display = 'none';
                var formattedJson = JSON.stringify(JSON.parse(px4.message), null, 2);
                document.getElementById('formattedJson').textContent = formattedJson;
            } else {
                document.getElementById('formattedJson').textContent = '';
            }
        });

        var car1;

        var car1Panel = document.getElementById('car1Panel');
        var car1Button = document.getElementById('car1Button');

        car1Button.addEventListener('click', function () {
            car1Panel.style.display = car1Panel.style.display === 'block' ? 'none' : 'block';
            if (car1Panel.style.display === 'block') {
                fik8bPanel.style.display = 'none';
                px4Panel.style.display = 'none';
                car2Panel.style.display = 'none';
                car3Panel.style.display = 'none';
                var formattedJson = JSON.stringify(car1, null, 2);
                document.getElementById('formattedJson').textContent = formattedJson;
            } else {
                document.getElementById('formattedJson').textContent = '';
            }
        });

        var car2;

        var car2Panel = document.getElementById('car2Panel');
        var car2Button = document.getElementById('car2Button');

        car2Button.addEventListener('click', function () {
            car2Panel.style.display = car2Panel.style.display === 'block' ? 'none' : 'block';
            if (car2Panel.style.display === 'block') {
                fik8bPanel.style.display = 'none';
                px4Panel.style.display = 'none';
                car1Panel.style.display = 'none';
                car3Panel.style.display = 'none';
                var formattedJson = JSON.stringify(car2, null, 2);
                document.getElementById('formattedJson').textContent = formattedJson;
            } else {
                document.getElementById('formattedJson').textContent = '';
            }
        });

        var car3;

        var car3Panel = document.getElementById('car3Panel');
        var car3Button = document.getElementById('car3Button');

        car3Button.addEventListener('click', function () {
            car3Panel.style.display = car3Panel.style.display === 'block' ? 'none' : 'block';
            if (car3Panel.style.display === 'block') {
                fik8bPanel.style.display = 'none';
                px4Panel.style.display = 'none';
                car1Panel.style.display = 'none';
                car2Panel.style.display = 'none';
                var formattedJson = JSON.stringify(car3, null, 2);
                document.getElementById('formattedJson').textContent = formattedJson;
            } else {
                document.getElementById('formattedJson').textContent = '';
            }
        });



        var fik8bDataPanel = document.getElementById('fik8bDataPanel');
        var fik8bDataButton = document.getElementById('fik8bDataButton');

        fik8bDataButton.addEventListener('click', function () {
            fik8bDataPanel.style.display = fik8bDataPanel.style.display === 'block' ? 'none' : 'block';
            if (fik8bDataPanel.style.display === 'block') {
                displayFik8bInfo(fik8b);
            } else {
                fik8bDataPanel.textContent = '';
            }
        });

        var px4DataPanel = document.getElementById('px4DataPanel');
        var px4DataButton = document.getElementById('px4DataButton');

        px4DataButton.addEventListener('click', function () {
            px4DataPanel.style.display = px4DataPanel.style.display === 'block' ? 'none' : 'block';
            if (px4DataPanel.style.display === 'block') {
                displayPx4Info(px4);
            } else {
                px4DataPanel.textContent = '';
            }
        });


        var car;

        var carDataPanel = document.getElementById('carDataPanel');
        var carDataButton = document.getElementById('carDataButton');

        carDataButton.addEventListener('click', function () {
            carDataPanel.style.display = carDataPanel.style.display === 'block' ? 'none' : 'block';
            if (carDataPanel.style.display === 'block') {
                displayCarInfo(car);
            } else {
                carDataPanel.textContent = '';
            }
        });


        function displayFik8bInfo(data) {
            var jsonDataObj = JSON.parse(data.message);

            // Extracting information
            var decodedPayload = jsonDataObj.uplink_message.decoded_payload;
            var frmPayload = decodedPayload.frm_payload;

            // Creating the table
            var infoTable = document.createElement('table');

            // Function to add a row to the table
            function addRow(label, value) {
                var row = infoTable.insertRow();
                var cell1 = row.insertCell(0);
                var cell2 = row.insertCell(1);
                cell1.innerHTML = '<strong>' + label + ':</strong>';
                cell2.textContent = value;
            }

            // Adding rows for each required information
            addRow('alt_m', decodedPayload.alt_m);
            addRow('alt_okay', decodedPayload.alt_okay);
            addRow('course', decodedPayload.course);
            addRow('course_ok', decodedPayload.course_ok);
            addRow('lat', decodedPayload.lat);
            addRow('latlon_age_s', decodedPayload.latlon_age_s);
            addRow('latlon_ok', decodedPayload.latlon_ok);
            addRow('lon', decodedPayload.lon);
            addRow('speed_mps', decodedPayload.speed_mps);
            addRow('speed_ok', decodedPayload.speed_ok);

            try {
                // Attempting to parse frm-payload
                var frmPayloadObj = JSON.parse(frmPayload);

                // Adding additional information from frm-payload
                if (frmPayloadObj.locations && frmPayloadObj.locations['frm-payload']) {
                    var frmPayloadLocation = frmPayloadObj.locations['frm-payload'];
                    addRow('frm-payload: latitude', frmPayloadLocation.latitude);
                    addRow('frm-payload: longitude', frmPayloadLocation.longitude);
                    addRow('frm-payload: source', frmPayloadLocation.source);
                }
            } catch (error) {
                // If parsing fails, display frm-payload as is
                addRow('frm-payload (raw)', frmPayload);
            }

            // Clearing and appending the table to the panel
            fik8bDataPanel.textContent = '';
            fik8bDataPanel.appendChild(infoTable);
        }


        function displayPx4Info(data) {
            var jsonDataObj = JSON.parse(data.message);
            var deviceId = jsonDataObj.end_device_ids.device_id;
            var speedMps = parseFloat(jsonDataObj.uplink_message.decoded_payload.speed_mps);
            var speedBackgroundColor = speedMps > 10 ? 'red' : 'green';
            var infoTable = document.createElement('table');
            var row = infoTable.insertRow();
            var cell1 = row.insertCell(0);
            var cell2 = row.insertCell(1);
            cell1.innerHTML = '<strong>SpeedMPS:</strong>';
            cell2.textContent = speedMps;
            cell2.style.backgroundColor = speedBackgroundColor;
            cell1.style.backgroundColor = speedBackgroundColor;
            var row = infoTable.insertRow();
            var cell3 = row.insertCell(0);
            var cell4 = row.insertCell(1);
            cell3.innerHTML = '<strong>SpeedMPS:</strong>';
            cell4.textContent = speedMps;
            cell3.style.backgroundColor = speedBackgroundColor;
            cell4.style.backgroundColor = speedBackgroundColor;
            px4DataPanel.textContent = '';
            px4DataPanel.appendChild(infoTable);
        }

        function displayCarInfo(data) {
            var latitude = parseFloat(data.latitude);
            var latitudeBackgroundColor = latitude > 10 ? 'red' : 'green';
            var infoTable = document.createElement('table');
            var row = infoTable.insertRow();
            var cell1 = row.insertCell(0);
            var cell2 = row.insertCell(1);
            cell1.innerHTML = '<strong>Latitude:</strong>';
            cell2.textContent = latitude;
            cell2.style.backgroundColor = latitudeBackgroundColor;
            cell1.style.backgroundColor = latitudeBackgroundColor;
            var row = infoTable.insertRow();
            var cell3 = row.insertCell(0);
            var cell4 = row.insertCell(1);
            cell3.innerHTML = '<strong>Latitude:</strong>';
            cell4.textContent = latitude;
            cell3.style.backgroundColor = latitudeBackgroundColor;
            cell4.style.backgroundColor = latitudeBackgroundColor;
            carDataPanel.textContent = '';
            carDataPanel.appendChild(infoTable);
        }

        function updateStaticTableWithcdpHb(cdpHb) {
            document.getElementById('cdpHb').textContent = JSON.stringify(cdpHb);
        }

        function updateStaticTableWithcdpHb(cdpHb) {
            var timestamp = new Date(cdpHb);
            var currentTimestamp = new Date();
            var timeDifferenceInSeconds = (currentTimestamp - timestamp) / 1000;
            if (timeDifferenceInSeconds < 60) {
                timestampBackgroundColor = 'green';
            } else if (timeDifferenceInSeconds >= 60 && timeDifferenceInSeconds <= 300) {
                timestampBackgroundColor = 'orange';
            } else {
                timestampBackgroundColor = 'red';
            }
            document.getElementById('cdpHb').textContent = JSON.stringify(cdpHb);
            document.getElementById('cdpHb').style.backgroundColor = timestampBackgroundColor;
        }

        function updateStaticTableWithcar1Hb(HbData) {
            var timestamp = new Date(HbData);
            var currentTimestamp = new Date();
            var timeDifferenceInSeconds = (currentTimestamp - timestamp) / 1000;
            if (timeDifferenceInSeconds < 60) {
                timestampBackgroundColor = 'green';
            } else if (timeDifferenceInSeconds >= 60 && timeDifferenceInSeconds <= 300) {
                timestampBackgroundColor = 'orange';
            } else {
                timestampBackgroundColor = 'red';
            }
            document.getElementById('car1Hb').textContent = JSON.stringify(HbData);
            document.getElementById('car1Hb').style.backgroundColor = timestampBackgroundColor;
        }

        function updateStaticTableWithcar2Hb(HbData) {
            var timestamp = new Date(HbData);
            var currentTimestamp = new Date();
            var timeDifferenceInSeconds = (currentTimestamp - timestamp) / 1000;
            if (timeDifferenceInSeconds < 60) {
                timestampBackgroundColor = 'green';
            } else if (timeDifferenceInSeconds >= 60 && timeDifferenceInSeconds <= 300) {
                timestampBackgroundColor = 'orange';
            } else {
                timestampBackgroundColor = 'red';
            }
            document.getElementById('car2Hb').textContent = JSON.stringify(HbData);
            document.getElementById('car2Hb').style.backgroundColor = timestampBackgroundColor;
        }
        function updateStaticTableWithcar3Hb(HbData) {
            var timestamp = new Date(HbData);
            var currentTimestamp = new Date();
            var timeDifferenceInSeconds = (currentTimestamp - timestamp) / 1000;
            if (timeDifferenceInSeconds < 60) {
                timestampBackgroundColor = 'green';
            } else if (timeDifferenceInSeconds >= 60 && timeDifferenceInSeconds <= 300) {
                timestampBackgroundColor = 'orange';
            } else {
                timestampBackgroundColor = 'red';
            }
            document.getElementById('car3Hb').textContent = JSON.stringify(HbData);
            document.getElementById('car3Hb').style.backgroundColor = timestampBackgroundColor;
        }
        function updateStaticTableWithldpHb(HbData) {
            var timestamp = new Date(HbData);
            var currentTimestamp = new Date();
            var timeDifferenceInSeconds = (currentTimestamp - timestamp) / 1000;
            if (timeDifferenceInSeconds < 60) {
                timestampBackgroundColor = 'green';
            } else if (timeDifferenceInSeconds >= 60 && timeDifferenceInSeconds <= 300) {
                timestampBackgroundColor = 'orange';
            } else {
                timestampBackgroundColor = 'red';
            }
            document.getElementById('ldpHb').textContent = JSON.stringify(HbData);
            document.getElementById('ldpHb').style.backgroundColor = timestampBackgroundColor;
        }

        function loadDataFromServer() {
            var now = new Date();
            var lastReloadTimeElement = document.getElementById('lastReloadTime');
            lastReloadTimeElement.textContent = 'Last Reload Time: ' + now.toLocaleString();
            fetch('/get/fik8b')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data) {
                        fik8b = data.data;
                    } else {
                        console.error('Received undefined data from the server');
                    }
                })
                .catch(error => {
                    console.error('Error loading data (api/data):', error);
                });

            fetch('/get/px4')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data) {
                        px4 = data.data;
                    } else {
                        console.error('Received undefined data from the server');
                    }
                })
                .catch(error => {
                    console.error('Error loading data (api/data):', error);
                });

            fetch('/get/car/data')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data) {
                        car = data.data;
                    } else {
                        console.error('Received undefined data from the server');
                    }
                })
                .catch(error => {
                    console.error('Error loading data (api/data):', error);
                });

            fetch('/get/car/data/1')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data) {
                        car1 = data.data;
                    } else {
                        console.error('Received undefined data from the server');
                    }
                })
                .catch(error => {
                    console.error('Error loading data (api/data):', error);
                });
            fetch('/get/car/data/2')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data) {
                        car2 = data.data;
                    } else {
                        console.error('Received undefined data from the server');
                    }
                })
                .catch(error => {
                    console.error('Error loading data (api/data):', error);
                });
            fetch('/get/car/data/3')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data) {
                        car3 = data.data;
                    } else {
                        console.error('Received undefined data from the server');
                    }
                })
                .catch(error => {
                    console.error('Error loading data (api/data):', error);
                });
            fetch('/get/cdp/hb')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    updateStaticTableWithcdpHb(data.data.cdp_heartbeat_value);
                })
                .catch(error => {
                    console.error('Error loading /cdp/hb data:', error);
                });
            fetch('/get/car/hb/1')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    updateStaticTableWithcar1Hb(data.data.car_heartbeat_value);
                })
                .catch(error => {
                    console.error('Error loading /car/hb/1 data:', error);
                });

            fetch('/get/car/hb/2')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    updateStaticTableWithcar2Hb(data.data.car_heartbeat_value);
                })
                .catch(error => {
                    console.error('Error loading /car/hb/2 data:', error);
                });

            fetch('/get/car/hb/3')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    updateStaticTableWithcar3Hb(data.data.car_heartbeat_value);
                })
                .catch(error => {
                });


            fetch('/get/ldp/hb')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    updateStaticTableWithldpHb(data.data.ldp_heartbeat_value);
                })
                .catch(error => {
                    console.error('Error loading /ldp/hb data:', error);
                });
        }

        loadDataFromServer();
    </script>
</body>

</html>
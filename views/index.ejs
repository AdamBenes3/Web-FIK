<!-- views/index.ejs -->
<!DOCTYPE html>
<html>

<head>
    <title>UJF</title>
    <style>
        table {
            border-collapse: collapse;
            width: 100%;
        }

        th,
        td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
    </style>
    <style>
        .custom-button {
            padding: 10px 60px;
            font-size: 16px;
            background-color: #f0f0f0;
            color: #333;
            border: 1px solid #ccc;
            border-radius: 5px;
            cursor: pointer;
            margin: 5px;
        }
    </style>
</head>

<body>
    <table>
        <td>
            <button class="custom-button" id="reloadButton">Reload
                data</button>
        </td>
        <td id="lastReloadTime">Last reload time:
        </td>
    </table>

    <h1>Json data:</h1>

    <table>
        <tr>
            <th>TTN fik8b last json</th>
            <td id="fik8bTimeStamp"></td>
            <td>
                <button class="custom-button" id="fik8bButton">fik8b</button>
                <div id="fik8bPanel"></div>
            </td>
        </tr>
        <tr>
            <th>TTN px4 last json</th>
            <td id="px4TimeStamp"></td>
            <td>
                <button class="custom-button" id="px4Button">px4</button>
                <div id="px4Panel"></div>
            </td>
        </tr>
        <tr>
            <th>Car 1 last json</th>
            <th></th>
            <td>
                <button class="custom-button" id="car1Button">Car 1</button>
                <div id="car1Panel"></div>
            </td>
        </tr>
        <tr>
            <th>Car 2 last json</th>
            <th></th>
            <td>
                <button class="custom-button" id="car2Button">Car 2</button>
                <div id="car2Panel"></div>
            </td>
        </tr>
        <tr>
            <th>Car 3 last json</th>
            <th></th>
            <td>
                <button class="custom-button" id="car3Button">Car 3</button>
                <div id="car3Panel"></div>
            </td>
        </tr>
    </table>

    <h1>Formated json:</h1>

    <pre id="formattedJson"></pre>

    <h1>Last HB:</h1>

    <div id="hbTableContainer">
        <table>
            <tr>
                <th>CDP HB</th>
                <td id="cdpHb"></td>
            </tr>
            <tr>
                <th>Car 1 HB</th>
                <td id="car1Hb"></td>
            </tr>
            <tr>
                <th>Car 2 HB</th>
                <td id="car2Hb"></td>
            </tr>
            <tr>
                <th>Car 3 HB</th>
                <td id="car3Hb"></td>
            </tr>
            <tr>
                <th>LDP HB</th>
                <td id="ldpHb"></td>
            </tr>
        </table>
    </div>

    <h1>Tables of output:</h1>

    <table>
        <tr>
            <th>fik8b TTN data</th>
            <td>
                <button class="custom-button" id="fik8bDataButton">fik8b</button>
                <div id="fik8bDataPanel"></div>
            </td>
        </tr>
        <tr>
            <th>px4 TTN data</th>
            <td>
                <button class="custom-button" id="px4DataButton">px4</button>
                <div id="px4DataPanel"></div>
            </td>
        </tr>
        <tr>
            <th>Car data</th>
            <td>
                <button class="custom-button" id="carDataButton">Car</button>
                <div id="carDataPanel"></div>
            </td>
        </tr>
    </table>

    <script>
        var now;

        var reloadButton = document.getElementById('reloadButton');

        function reloadData() {
            loadDataFromServer();
        }

        reloadButton.addEventListener('click', reloadData);
        setInterval(reloadData, 6000);


        var fik8b;

        var fik8bPanel = document.getElementById('fik8bPanel');
        var fik8bButton = document.getElementById('fik8bButton');

        fik8bButton.addEventListener('click', function () {
            fik8bPanel.style.display = fik8bPanel.style.display === 'block' ? 'none' : 'block';
            if (fik8bPanel.style.display === 'block') {
                px4Panel.style.display = 'none';
                car1Panel.style.display = 'none';
                car2Panel.style.display = 'none';
                car3Panel.style.display = 'none';
                var formattedJson = JSON.stringify(JSON.parse(fik8b.message), null, 2);
                document.getElementById('formattedJson').textContent = formattedJson;
            } else {
                document.getElementById('formattedJson').textContent = '';
            }
        });



        var px4;

        var px4Panel = document.getElementById('px4Panel');
        var px4Button = document.getElementById('px4Button');

        px4Button.addEventListener('click', function () {
            px4Panel.style.display = px4Panel.style.display === 'block' ? 'none' : 'block';
            if (px4Panel.style.display === 'block') {
                fik8bPanel.style.display = 'none';
                car1Panel.style.display = 'none';
                car2Panel.style.display = 'none';
                car3Panel.style.display = 'none';
                var formattedJson = JSON.stringify(JSON.parse(px4.message), null, 2);
                document.getElementById('formattedJson').textContent = formattedJson;
            } else {
                document.getElementById('formattedJson').textContent = '';
            }
        });

        var car1;

        var car1Panel = document.getElementById('car1Panel');
        var car1Button = document.getElementById('car1Button');

        car1Button.addEventListener('click', function () {
            car1Panel.style.display = car1Panel.style.display === 'block' ? 'none' : 'block';
            if (car1Panel.style.display === 'block') {
                fik8bPanel.style.display = 'none';
                px4Panel.style.display = 'none';
                car2Panel.style.display = 'none';
                car3Panel.style.display = 'none';
                var formattedJson = JSON.stringify(car1, null, 2);
                document.getElementById('formattedJson').textContent = formattedJson;
            } else {
                document.getElementById('formattedJson').textContent = '';
            }
        });

        var car2;

        var car2Panel = document.getElementById('car2Panel');
        var car2Button = document.getElementById('car2Button');

        car2Button.addEventListener('click', function () {
            car2Panel.style.display = car2Panel.style.display === 'block' ? 'none' : 'block';
            if (car2Panel.style.display === 'block') {
                fik8bPanel.style.display = 'none';
                px4Panel.style.display = 'none';
                car1Panel.style.display = 'none';
                car3Panel.style.display = 'none';
                var formattedJson = JSON.stringify(car2, null, 2);
                document.getElementById('formattedJson').textContent = formattedJson;
            } else {
                document.getElementById('formattedJson').textContent = '';
            }
        });

        var car3;

        var car3Panel = document.getElementById('car3Panel');
        var car3Button = document.getElementById('car3Button');

        car3Button.addEventListener('click', function () {
            car3Panel.style.display = car3Panel.style.display === 'block' ? 'none' : 'block';
            if (car3Panel.style.display === 'block') {
                fik8bPanel.style.display = 'none';
                px4Panel.style.display = 'none';
                car1Panel.style.display = 'none';
                car2Panel.style.display = 'none';
                var formattedJson = JSON.stringify(car3, null, 2);
                document.getElementById('formattedJson').textContent = formattedJson;
            } else {
                document.getElementById('formattedJson').textContent = '';
            }
        });



        var fik8bDataPanel = document.getElementById('fik8bDataPanel');
        var fik8bDataButton = document.getElementById('fik8bDataButton');

        fik8bDataButton.addEventListener('click', function () {
            fik8bDataPanel.style.display = fik8bDataPanel.style.display === 'block' ? 'none' : 'block';
            if (fik8bDataPanel.style.display === 'block') {
                displayFik8bInfo(fik8b);
            } else {
                fik8bDataPanel.textContent = '';
            }
        });

        var px4DataPanel = document.getElementById('px4DataPanel');
        var px4DataButton = document.getElementById('px4DataButton');

        px4DataButton.addEventListener('click', function () {
            px4DataPanel.style.display = px4DataPanel.style.display === 'block' ? 'none' : 'block';
            if (px4DataPanel.style.display === 'block') {
                displayPx4Info(px4);
            } else {
                px4DataPanel.textContent = '';
            }
        });


        var car;

        var carDataPanel = document.getElementById('carDataPanel');
        var carDataButton = document.getElementById('carDataButton');

        carDataButton.addEventListener('click', function () {
            carDataPanel.style.display = carDataPanel.style.display === 'block' ? 'none' : 'block';
            if (carDataPanel.style.display === 'block') {
                displayCarInfo(car);
            } else {
                carDataPanel.textContent = '';
            }
        });


        function displayFik8bInfo(data) {
            var jsonDataObj = JSON.parse(data.message);

            // Extracting information
            var decodedPayload = jsonDataObj.uplink_message.decoded_payload;
            var frmPayload = decodedPayload.frm_payload;

            // Creating the table
            var infoTable = document.createElement('table');

            // Function to add a row to the table
            function addRow(label, value) {
                var row = infoTable.insertRow();
                var cell1 = row.insertCell(0);
                var cell2 = row.insertCell(1);
                cell1.innerHTML = '<strong>' + label + ':</strong>';
                cell2.textContent = value;
            }

            // Adding rows for each required information
            addRow('alt_m', decodedPayload.alt_m);
            addRow('alt_okay', decodedPayload.alt_okay);
            addRow('course', decodedPayload.course);
            addRow('course_ok', decodedPayload.course_ok);
            addRow('lat', decodedPayload.lat);
            addRow('latlon_age_s', decodedPayload.latlon_age_s);
            addRow('latlon_ok', decodedPayload.latlon_ok);
            addRow('lon', decodedPayload.lon);
            addRow('speed_mps', decodedPayload.speed_mps);
            addRow('speed_ok', decodedPayload.speed_ok);

            try {
                // Attempting to parse frm-payload
                var frmPayloadObj = JSON.parse(frmPayload);

                // Adding additional information from frm-payload
                if (frmPayloadObj.locations && frmPayloadObj.locations['frm-payload']) {
                    var frmPayloadLocation = frmPayloadObj.locations['frm-payload'];
                    addRow('frm-payload: latitude', frmPayloadLocation.latitude);
                    addRow('frm-payload: longitude', frmPayloadLocation.longitude);
                    addRow('frm-payload: source', frmPayloadLocation.source);
                }
            } catch (error) {
                // If parsing fails, display frm-payload as is
                addRow('frm-payload (raw)', frmPayload);
            }

            // Clearing and appending the table to the panel
            fik8bDataPanel.textContent = '';
            fik8bDataPanel.appendChild(infoTable);
        }


        function displayPx4Info(data) {
            var jsonDataObj = JSON.parse(data.message);

            // Extracting information
            var decodedPayload = jsonDataObj.uplink_message.decoded_payload;
            var frmPayload = decodedPayload.frm_payload;

            // Creating the table
            var infoTable = document.createElement('table');

            // Function to add a row to the table
            function addRow(label, value) {
                var row = infoTable.insertRow();
                var cell1 = row.insertCell(0);
                var cell2 = row.insertCell(1);
                cell1.innerHTML = '<strong>' + label + ':</strong>';
                cell2.textContent = value;
            }

            // Adding rows for each required information
            addRow('alt_m', decodedPayload.alt_m);
            addRow('alt_okay', decodedPayload.alt_okay);
            addRow('course', decodedPayload.course);
            addRow('course_ok', decodedPayload.course_ok);
            addRow('lat', decodedPayload.lat);
            addRow('latlon_age_s', decodedPayload.latlon_age_s);
            addRow('latlon_ok', decodedPayload.latlon_ok);
            addRow('lon', decodedPayload.lon);
            addRow('speed_mps', decodedPayload.speed_mps);
            addRow('speed_ok', decodedPayload.speed_ok);

            try {
                // Attempting to parse frm-payload
                var frmPayloadObj = JSON.parse(frmPayload);

                // Adding additional information from frm-payload
                if (frmPayloadObj.locations && frmPayloadObj.locations['frm-payload']) {
                    var frmPayloadLocation = frmPayloadObj.locations['frm-payload'];
                    addRow('frm-payload: latitude', frmPayloadLocation.latitude);
                    addRow('frm-payload: longitude', frmPayloadLocation.longitude);
                    addRow('frm-payload: source', frmPayloadLocation.source);
                }
            } catch (error) {
                // If parsing fails, display frm-payload as is
                addRow('frm-payload (raw)', frmPayload);
            }

            // Clearing and appending the table to the panel
            px4DataPanel.textContent = '';
            px4DataPanel.appendChild(infoTable);
        }

        function displayCarInfo(data) {
            function make(b1, b2, b3, b4) {
                return (b1 << 24) | (b2 << 16) | (b3 << 8) | b4;
            }

            const first16Numbers = data.TUNNEL.payload.slice(0, 16);

            const convertedNumbers = [];
            for (let i = 0; i < 16; i += 4) {
                const num1 = make(...first16Numbers.slice(i, i + 4));
                convertedNumbers.push(num1);
            }
            const latitude = parseFloat(data.latitude);
            const longitude = parseFloat(data.longitude);
            const altitude = parseFloat(data.altitude);
            const tmp = data.tmp;

            var infoTable = document.createElement('table');
            displayTableRow(infoTable, 'Converted 1:', convertedNumbers[0]);
            displayTableRow(infoTable, 'Converted 2:', convertedNumbers[1]);
            displayTableRow(infoTable, 'Converted 3:', convertedNumbers[2]);
            displayTableRow(infoTable, 'Converted 4:', convertedNumbers[3]);
            displayTableRow(infoTable, 'Latitude:', latitude);
            displayTableRow(infoTable, 'Longitude:', longitude);
            displayTableRow(infoTable, 'Altitude:', altitude);
            displayTableRow(infoTable, 'Tmp:', tmp);
            carDataPanel.textContent = '';
            carDataPanel.appendChild(infoTable);
        }

        function displayTableRow(table, label, value) {
            var row = table.insertRow();
            var cell1 = row.insertCell(0);
            var cell2 = row.insertCell(1);
            cell1.innerHTML = `<strong>${label}</strong>`;
            cell2.textContent = value;
        }

        function updateStaticTableWithcdpHb(cdpHb) {
            var timestamp = new Date(cdpHb);
            timestamp.setHours(timestamp.getHours() + 1);
            var currentTimestamp = new Date();
            var timeDifferenceInSeconds = (currentTimestamp - timestamp) / 1000;
            if (timeDifferenceInSeconds < 60) {
                timestampBackgroundColor = 'rgba(0, 128, 0, 0.7)';
            } else if (timeDifferenceInSeconds >= 60 && timeDifferenceInSeconds <= 300) {
                timestampBackgroundColor = 'rgba(255, 165, 0, 0.7)';
            } else {
                timestampBackgroundColor = 'rgba(255, 0, 0, 0.7)';
            }
            document.getElementById('cdpHb').textContent = timestamp.toLocaleString('en-US', { hour12: false }) + ", (-" + timeDifferenceInSeconds + "s)";
            document.getElementById('cdpHb').style.backgroundColor = timestampBackgroundColor;
        }

        function updateStaticTableWithcar1Hb(HbData) {
            var timestamp = new Date(HbData);
            timestamp.setHours(timestamp.getHours() + 1);
            var currentTimestamp = new Date();
            var timeDifferenceInSeconds = (currentTimestamp - timestamp) / 1000;
            if (timeDifferenceInSeconds < 60) {
                timestampBackgroundColor = 'rgba(0, 128, 0, 0.7)';
            } else if (timeDifferenceInSeconds >= 60 && timeDifferenceInSeconds <= 300) {
                timestampBackgroundColor = 'rgba(255, 165, 0, 0.7)';
            } else {
                timestampBackgroundColor = 'rgba(255, 0, 0, 0.7)';
            }
            document.getElementById('car1Hb').textContent = timestamp.toLocaleString('en-US', { hour12: false }) + ", (-" + timeDifferenceInSeconds + "s)";
            document.getElementById('car1Hb').style.backgroundColor = timestampBackgroundColor;
        }

        function updateStaticTableWithcar2Hb(HbData) {
            var timestamp = new Date(HbData);
            timestamp.setHours(timestamp.getHours() + 1);
            var currentTimestamp = new Date();
            var timeDifferenceInSeconds = (currentTimestamp - timestamp) / 1000;
            if (timeDifferenceInSeconds < 60) {
                timestampBackgroundColor = 'rgba(0, 128, 0, 0.7)';
            } else if (timeDifferenceInSeconds >= 60 && timeDifferenceInSeconds <= 300) {
                timestampBackgroundColor = 'rgba(255, 165, 0, 0.7)';
            } else {
                timestampBackgroundColor = 'rgba(255, 0, 0, 0.7)';
            }
            document.getElementById('car2Hb').textContent = timestamp.toLocaleString('en-US', { hour12: false }) + ", (-" + timeDifferenceInSeconds + "s)";
            document.getElementById('car2Hb').style.backgroundColor = timestampBackgroundColor;
        }
        function updateStaticTableWithcar3Hb(HbData) {
            var timestamp = new Date(HbData);
            timestamp.setHours(timestamp.getHours() + 1);
            var currentTimestamp = new Date();
            var timeDifferenceInSeconds = (currentTimestamp - timestamp) / 1000;
            if (timeDifferenceInSeconds < 60) {
                timestampBackgroundColor = 'rgba(0, 128, 0, 0.7)';
            } else if (timeDifferenceInSeconds >= 60 && timeDifferenceInSeconds <= 300) {
                timestampBackgroundColor = 'rgba(255, 165, 0, 0.7)';
            } else {
                timestampBackgroundColor = 'rgba(255, 0, 0, 0.7)';
            }
            document.getElementById('car3Hb').textContent = timestamp.toLocaleString('en-US', { hour12: false }) + ", (-" + timeDifferenceInSeconds + "s)";
            document.getElementById('car3Hb').style.backgroundColor = timestampBackgroundColor;
        }
        function updateStaticTableWithldpHb(HbData) {
            var timestamp = new Date(HbData);
            timestamp.setHours(timestamp.getHours() + 1);
            var currentTimestamp = new Date();
            var timeDifferenceInSeconds = (currentTimestamp - timestamp) / 1000;
            if (timeDifferenceInSeconds < 60) {
                timestampBackgroundColor = 'rgba(0, 128, 0, 0.7)';
            } else if (timeDifferenceInSeconds >= 60 && timeDifferenceInSeconds <= 300) {
                timestampBackgroundColor = 'rgba(255, 165, 0, 0.7)';
            } else {
                timestampBackgroundColor = 'rgba(255, 0, 0, 0.7)';
            }
            document.getElementById('ldpHb').textContent = timestamp.toLocaleString('en-US', { hour12: false }) + ", (-" + timeDifferenceInSeconds + "s)";
            document.getElementById('ldpHb').style.backgroundColor = timestampBackgroundColor;
        }

        function loadDataFromServer() {
            var load = true;
            fetch('/get/fik8b')
                .then(response => {
                    if (!response.ok) {
                        console.log('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data) {
                        fik8b = data.data;
                        var timestamp = new Date(fik8b.timestamp);
                        timestamp.setHours(timestamp.getHours() + 1);
                        var currentTimestamp = new Date();
                        var timeDifferenceInSeconds = (currentTimestamp - timestamp) / 1000;
                        if (timeDifferenceInSeconds < 260) {
                            timestampBackgroundColor = 'rgba(0, 128, 0, 0.7)';
                        } else if (timeDifferenceInSeconds >= 260 && timeDifferenceInSeconds <= 1300) {
                            timestampBackgroundColor = 'rgba(255, 165, 0, 0.7)';
                        } else {
                            timestampBackgroundColor = 'rgba(255, 0, 0, 0.7)';
                        }
                        document.getElementById('fik8bTimeStamp').textContent = timestamp.toLocaleString('en-US', { hour12: false }) + ", (-" + timeDifferenceInSeconds + "s)";
                        document.getElementById('fik8bTimeStamp').style.backgroundColor = timestampBackgroundColor;
                    } else {
                        console.log('Received undefined data from the server');
                    }
                })
                .catch(error => {
                    load = false;
                    console.log('Error loading data /get/fik8b: ', error);
                });

            fetch('/get/px4')
                .then(response => {
                    if (!response.ok) {
                        console.log('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data) {
                        px4 = data.data;
                        var timestamp = new Date(px4.timestamp);
                        timestamp.setHours(timestamp.getHours() + 1);
                        var currentTimestamp = new Date();
                        var timeDifferenceInSeconds = (currentTimestamp - timestamp) / 1000;
                        if (timeDifferenceInSeconds < 260) {
                            timestampBackgroundColor = 'rgba(0, 128, 0, 0.7)';
                        } else if (timeDifferenceInSeconds >= 260 && timeDifferenceInSeconds <= 1300) {
                            timestampBackgroundColor = 'rgba(255, 165, 0, 0.7)';
                        } else {
                            timestampBackgroundColor = 'rgba(255, 0, 0, 0.7)';
                        }
                        document.getElementById('px4TimeStamp').textContent = timestamp.toLocaleString('en-US', { hour12: false }) + ", (-" + timeDifferenceInSeconds + "s)";
                        document.getElementById('px4TimeStamp').style.backgroundColor = timestampBackgroundColor;
                    } else {
                        console.log('Received undefined data from the server');
                    }
                })
                .catch(error => {
                    load = false;
                    console.log('Error loading data /get/px4: ', error);
                });

            fetch('/get/car/data')
                .then(response => {
                    if (!response.ok) {
                        console.log('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data) {
                        car = data.data;
                    } else {
                        console.log('Received undefined data from the server');
                    }
                })
                .catch(error => {
                    load = false;
                    console.log('Error loading data /get/car/data: ', error);
                });

            fetch('/get/car/data/1')
                .then(response => {
                    if (!response.ok) {
                        console.log('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data) {
                        car1 = data.data;
                    } else {
                        console.log('Received undefined data from the server');
                    }
                })
                .catch(error => {
                    load = false;
                    console.log('Error loading data /get/car/data/1: ', error);
                });
            fetch('/get/car/data/2')
                .then(response => {
                    if (!response.ok) {
                        console.log('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data) {
                        car2 = data.data;
                    } else {
                        console.log('Received undefined data from the server');
                    }
                })
                .catch(error => {
                    console.log('Error loading data /get/car/data/2: ', error);
                });
            fetch('/get/car/data/3')
                .then(response => {
                    if (!response.ok) {
                        console.log('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data) {
                        car3 = data.data;
                    } else {
                        console.log('Received undefined data from the server');
                    }
                })
                .catch(error => {
                    load = false;
                    console.log('Error loading data /get/car/data/3: ', error);
                });
            fetch('/get/cdp/hb')
                .then(response => {
                    if (!response.ok) {
                        console.log('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    updateStaticTableWithcdpHb(data.data.cdp_heartbeat_value);
                })
                .catch(error => {
                    load = false;
                    console.log('Error loading data /get/cdp/hb: ', error);
                });
            fetch('/get/car/hb/1')
                .then(response => {
                    if (!response.ok) {
                        console.log('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    updateStaticTableWithcar1Hb(data.data.car_heartbeat_value);
                })
                .catch(error => {
                    load = false;
                    console.log('Error loading data /get/car/hb/1: ', error);
                });

            fetch('/get/car/hb/2')
                .then(response => {
                    if (!response.ok) {
                        console.log('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    updateStaticTableWithcar2Hb(data.data.car_heartbeat_value);
                })
                .catch(error => {
                    load = false;
                    console.log('Error loading data /car/hb/2: ', error);
                });

            fetch('/get/car/hb/3')
                .then(response => {
                    if (!response.ok) {
                        console.log('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    updateStaticTableWithcar3Hb(data.data.car_heartbeat_value);
                })
                .catch(error => {
                    load = false;
                    console.log('Error loading data /get/car/hb/3: ', error);
                });


            fetch('/get/ldp/hb')
                .then(response => {
                    if (!response.ok) {
                        console.log('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    updateStaticTableWithldpHb(data.data.ldp_heartbeat_value);
                })
                .catch(error => {
                    load = false;
                    console.log('Error loading data /get/ldp/hb: ', error);
                });
            Promise.all([
                fetch('/get/fik8b'),
                fetch('/get/px4'),
                fetch('/get/car/data'),
                fetch('/get/car/data/1'),
                fetch('/get/car/data/2'),
                fetch('/get/car/data/3'),
                fetch('/get/car/hb/1'),
                fetch('/get/car/hb/2'),
                fetch('/get/car/hb/3'),
                fetch('/get/ldp/hb')
            ])
                .then(responses => {
                    responses.forEach(response => {
                        if (!response.ok) {
                            console.log('Network response was not ok');
                            load = false;
                        }
                    });
                    if (load) {
                        responses[3].json().then(data => {
                            now = new Date();
                            var timestampBackgroundColor = 'rgba(0, 128, 0, 0.7)';
                            var lastReloadTimeElement = document.getElementById('lastReloadTime');
                            lastReloadTimeElement.textContent = 'Last reload time: ' + now.toLocaleString('en-US', { hour12: false });
                            lastReloadTimeElement.style.backgroundColor = timestampBackgroundColor;
                        });
                    }
                })
                .catch(error => {
                    var currentTimestamp = new Date();
                    var timeDifferenceInSeconds = (currentTimestamp - now) / 1000;
                    if (timeDifferenceInSeconds < 10) {
                        timestampBackgroundColor = 'rgba(0, 128, 0, 0.7)';
                    } else if (timeDifferenceInSeconds >= 10 && timeDifferenceInSeconds <= 100) {
                        timestampBackgroundColor = 'rgba(255, 165, 0, 0.7)';
                    } else {
                        timestampBackgroundColor = 'rgba(255, 0, 0, 0.7)';
                    }
                    var lastReloadTimeElement = document.getElementById('lastReloadTime');
                    lastReloadTimeElement.style.backgroundColor = timestampBackgroundColor;
                    console.log('Error loading data');
                });
        }

        loadDataFromServer();
    </script>
</body>

</html>